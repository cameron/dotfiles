#!/usr/bin/env bash

# TODO is it worth considering an alternative of a sparse home directory that gets overlaid/linked into the real one?
# - how to deal with folders that should be linked entirely and not created?

DOTFILES_ROOT=$(realpath "$0" | sed "s/\/$(basename $0)//")
if [ "$HOME" == "/" ]; then
  HOMEDIR="/root"
else
  HOMEDIR="$HOME"
fi

set -e

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

overwrite_all=false
if [ "$1" == "--overwrite" ]; then
    overwrite_all=true
fi

install_dotfiles () {
  info "installing dotfiles"

  backup_all=false
  skip_all=false

  for source in `find -L $DOTFILES_ROOT -maxdepth 4 -name \*.symlink`
  do
    strip_symlink=${source%.*}
    strip_dotfiles_path=$(echo $strip_symlink | sed "s/$(echo $DOTFILES_ROOT | sed 's/\//\\\//g')//")
    dest="$HOMEDIR/${strip_dotfiles_path:1}"
    mkdir -p $(dirname $dest)
    if [ -f $dest ] || [ -d $dest ] || [ -L $dest ]
    then
      overwrite=false
      backup=false
      skip=false
      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: $dest, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
          echo $dest
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

install_dotfiles
ln -s $DOTFILES_ROOT/bin ~/bin
